version: '3.8'

networks:
  traefik-net:
    name: ${TRAEFIK_NETWORK:-demo-traefik-net}
    driver: overlay
    attachable: true
  prometheus-net:
    name: ${PROMETHEUS_NETWORK:-prometheus-net}
    driver: overlay
    attachable: true

volumes:
  alertmanager_data:
  prometheus_data:
  swarmetheus_data:
  traefik_data:
    external: true
    name: traefik_data

services:
  swarmetheus:
    image: rjchicago/swarmetheus:${VERSION:-latest}
    build:
      context: swarmetheus
    networks:
      - prometheus-net
    environment:
      ENV: "${ENV:-demo}"
      HOSTNAME: "{{.Node.Hostname}}"
      PROMETHEUS_NETWORK: "${PROMETHEUS_NETWORK:-prometheus-net}"
      CUSTOM_ENVS: "traefik" # comma or semicolon deliminated string
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - swarmetheus_data:/swarmetheus_data
      - ./swarmetheus/env/traefik.env:/swarmetheus/env/traefik.env # volume map custom env
      - ./swarmetheus/rules/traefik-rules.yml:/swarmetheus/rules/traefik-rules.yml # volume map custom rules
      - ./swarmetheus/alerting/alertmanager.yml:/swarmetheus_data/alerting/alertmanager.yml # volume map alerting
    deploy:
      mode: global

  prometheus:
    image: prom/prometheus:latest
    user: root
    command:
      - "--config.file=/swarmetheus_data/config/prometheus.yml"
      - "--storage.tsdb.path=/prometheus_data"
      - "--storage.tsdb.retention.time=30d"
      - "--web.enable-lifecycle"
      - "--web.external-url=http://localhost:9090"
    networks:
      - prometheus-net
      - traefik-net
    volumes:
      - prometheus_data:/prometheus_data
      - swarmetheus_data:/swarmetheus_data
    deploy:
      update_config:
        delay: 10s
        order: start-first
      labels:
        - traefik.enable=true
        - traefik.docker.network=${TRAEFIK_NETWORK:-demo-traefik-net}
        - traefik.http.routers.prometheus.service=prometheus
        - traefik.http.routers.prometheus.rule=Host(`prometheus.localhost`)
        - traefik.http.services.prometheus.loadbalancer.server.port=9090

  traefik:
    image: traefik:latest
    ports:
      - 80:80
      - 8080:8080
      - 8084:8084
      - 443:443
    networks:
      - traefik-net
    volumes:
      - traefik_data:/var/log
      - /var/run/docker.sock:/var/run/docker.sock
      - ./certs/tls.crt:/certs/tls.crt
      - ./certs/tls.key:/certs/tls.key
      - ./traefik:/etc/traefik
    deploy:
      mode: global
      update_config:
        delay: 20s
        order: start-first
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.docker.network=${TRAEFIK_NETWORK:-demo-traefik-net}
        - traefik.http.routers.traefik.service=api@internal
        - traefik.http.routers.traefik.rule=Host(`traefik.localhost`)
        - traefik.http.services.traefik.loadbalancer.server.port=8080

  alertmanager:
    image: prom/alertmanager:latest
    networks:
      - prometheus-net
      - traefik-net
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
      - "--web.external-url=${ALERTMANAGER_EXTERNAL_URL:-http://alertmanager.localhost}"
    volumes:
      - alertmanager_data:/alertmanager
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=${TRAEFIK_NETWORK:-demo-traefik-net}
        - traefik.http.routers.alertmanager.service=alertmanager
        - traefik.http.routers.alertmanager.rule=Host(`alertmanager.localhost`)
        - traefik.http.services.alertmanager.loadbalancer.server.port=9093

  grafana:
    image: grafana/grafana:latest
    networks:
      - prometheus-net
      - traefik-net
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
    volumes:
      - ./grafana:/etc/grafana/provisioning/datasources
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=${TRAEFIK_NETWORK:-demo-traefik-net}
        - traefik.http.routers.grafana.service=grafana
        - traefik.http.routers.grafana.rule=Host(`grafana.localhost`)
        - traefik.http.services.grafana.loadbalancer.server.port=3000
